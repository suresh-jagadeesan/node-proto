swagger: "2.0"
info:
  version: "0.0.1"
  title: Api Base
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /product/{productId}:
    # x-swagger-router-controller: product
    get:
      tags:
      - "product"
      summary: "Find product by Id"
      description: "Returns a single product"
      operationId: "getById"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "Id of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: "Invalid Id supplied"
        404:
          description: "Product not found"
      # security:
      # - api_key: []
  /product:
    # x-swagger-router-controller: product
    post:
      tags:
      - "product"
      summary: "Add a new product"
      description: "Add a new product"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/ProductResponse"
      responses:
        405:
          description: "Invalid input"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  ProductResponse:
    type: "object"
    required:
      - "name"
      - "description"
      - "price"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        description: Name of Product
        example: "awesome product"
      description:
        type: "string"
        description: Product description
        example: "description of awesome product"
      price:
        type: "number"
        description: "price of product"
        example: 19.99

